# Mám magisterský titul z veřejné správy a bakalářský titul ze strojního inženýrství (Hardware). Díky technickému vzdělání mám dobrý základ v logickém myšlení, práci s daty a systémovém přístupu, což mi velmi pomáhá při vývoji softwaru. Dnes se zaměřuji na backend vývoj, práci s API a TypeScriptem.


#--------------------------------------TypeScript
TypeScript je nadstavba JavaScriptu, která přidává statické typování. Díky tomu je kód přehlednější, bezpečnější a lépe se udržuje, zvlášť ve větších projektech.



#--------------------------------------- NestJS
🟪 Co je NestJS:
NestJS je framework pro Node.js, napsaný v TypeScriptu. Používá architekturu podobnou jako v Angularu – pracuje s controllery, službami a moduly. Pomáhá psát strukturované a škálovatelné backend aplikace.



#-------------------------------- Rozdíl mezi API a REST API
API (Application Programming Interface) je obecný pojem pro rozhraní, které umožňuje komunikaci mezi různými částmi softwaru.
REST API je specifický typ API, který využívá HTTP protokol a principy REST – jako jsou metody GET, POST, PUT, DELETE – pro výměnu dat mezi klientem a serverem, nejčastěji ve formátu JSON.

Příklad:
API může být knihovna v Node.js pro práci se soubory.
REST API je webová služba, která vrací data na základě HTTP požadavků, třeba /api/počasí.



#--------------------------------------------Docker
Docker je nástroj, který umožňuje zabalit aplikaci spolu se všemi jejími závislostmi (knihovny, konfigurace, prostředí) do kontejneru.
Kontejner běží stejně na každém počítači — ať už je to vývojářský notebook, server nebo cloud.
Je to jako virtuální stroj, ale lehčí a rychlejší.
Programátoři používají Docker, aby nemuseli řešit problémy typu: "U mě to funguje, ale u tebe ne."
Příklad:
Napíšu aplikaci v Node.js, vytvořím Docker kontejner a ten poběží stejně na každém systému bez dalších úprav.



#------------------Jaký je rozdíl mezi Git a Dockerem a co s nimi dělám
Git používám jako nástroj pro správu verzí a týmovou spolupráci.
Umožňuje mi sledovat změny v kódu, vytvářet větve, dělat pull requesty, a spolupracovat s ostatními vývojáři.
Umím přidat spolupracovníky, řešit konflikty při slučování větví (merge), a pracovat v týmu pomocí GitHubu nebo GitLabu.

Docker naopak používám pro vytváření kontejnerů, tedy balíčků, které obsahují celý projekt i s prostředím, knihovnami a nastavením.
To je užitečné, když chci, aby moje aplikace běžela všude stejně — ať už na jiném počítači nebo na serveru.
Vím, jak napsat Dockerfile, jak použít docker build a docker run, a jak sdílet obraz (image) přes Docker Hub.




#---------------------------------- Rozdil mezí Třída a Objekt
Třída (class) je šablona, podle které se vytvářejí objekty.
Obsahuje definici vlastností a metod, které bude mít každý objekt.
Objekt je konkrétní instance třídy — reálný „výrobek“ vytvořený podle této šablony.

🧾 Příklad, jak to říct na pohovoru:
Například v JavaScriptu:
Mám třídu Car, která má vlastnost brand a metodu drive().
Když vytvořím const myCar = new Car("Toyota"), myCar je objekt vytvořený na základě třídy Car.


#---------------------------------- Objektově orientované programování (OOP)
Objektově orientované programování (OOP) je přístup k programování, který nahlíží na program jako na soubor objektů vzájemně spolupracujících. Každý objekt spojuje data (vlastnosti) a funkce (chování) do jedné jednotky.

Objektově orientované programování je styl programování, kde je hlavní jednotkou programování objekt.
Představ si: Máš auto. To je objekt, který má:
 - vlastnosti (např. barvu, rychlost, značku),
 - činnosti (např. jet, zastavit, zatáčet).

V OOP vytváříš takové objekty v kódu. Každý objekt je jako skutečný předmět s:
 - daty (vlastnostmi),
 - funkcemi (co umí dělat).

Proč je to užitečné?
 - Kód je přehlednější,
 - Objekty lze znovu použít,
 - Vhodné pro větší projekty.

 Přiklad JS:
 class Car {
  constructor(color, speed) {
    this.color = color;
    this.speed = speed;
  }

  drive() {
    console.log(`Auto se pohybuje rychlostí ${this.speed} km/h.`);
  }
}

const myCar = new Car("červena", 120);

console.log(`Barva auta je: ${myCar.color}`);
myCar.drive();

python:
class Car:
    def __init__(self, color):
        self.color = color

    def drive(self):
        print("Auto se pohybuje!")

my_car = Car("červena")
print(my_car.color)
my_car.drive()

# ---------------------------------- git, GitHub
🔁 git merge – sloučení větví
 - Spojí dvě větve dohromady.
 - Zachová celou historii z obou větví.
 - Může vytvořit merge commit (speciální spojovací záznam).
 - Bezpečný při týmové práci.

🔄 git rebase – přepsání historie:
 - Přesune změny z jedné větve na konec jiné větve.
 - Vytváří čistou, přímou historii bez odboček.
 - Nesmí se používat na sdílených větvích (může způsobit konflikty).



 #-----------------------------------Synchronní / Asynchronní
Synchronní funkce běží postupně jedna za druhou, každá čeká, až skončí ta předchozí, než začne další.
Například zavoláš funkci, ta udělá svou práci a až potom pokračuje další kód.

Asynchronní funkce mohou běžet a čekat na výsledek současně s jiným kódem, aniž by blokovaly program.
Například požadavek na server běží na pozadí, zatímco program může dělat něco jiného.


#-------------------------------------Analysa
SEO (Search Engine Optimization) — jak lépe zviditelnit webovou stránku ve vyhledávačích.

SSR (Server-Side Rendering) — způsob, jak rychle a správně zobrazit stránky ze serveru.
Pomáhá jak s rychlostí a zážitkem uživatelů, tak s optimalizací pro vyhledávače; je oblíbený u webů, kde je klíčová dostupnost a špičkové SEO. Nejčastěji se využívá v kombinaci s moderními frameworky jako Next.js nebo Nuxt.js


#-------------------------------------Databáze
Hlavní typy databází s příklady pro každý typ:
 - Relační (SQL)
    Data jsou uložena v tabulkách s jasně definovanou strukturou a vztahy mezi tabulkami (pomocí klíčů).
Příklady: MySQL, PostgreSQL, Microsoft SQL Server, Oracle Database, SQLite, MariaDB.

 - Nerelační (NoSQL)
    Různé formáty ukládání: dokumenty, klíč-hodnota, grafy, sloupce. Jsou určené pro flexibilní strukturu a škálovatelnost.
Příklady: MongoDB (dokumentová), Redis (klíč-hodnota), Cassandra (sloupcová), Neo4j (grafová), CouchDB (dokumentová).

 - Hierarchické
    Data jsou uspořádána ve stromové struktuře, kde každý záznam má jednoho rodiče.
Příklady: IBM Information Management System (IMS).

 - Síťové
    Data jsou reprezentována jako síť vzájemně propojených záznamů, kde jeden záznam může mít více vztahů k ostatním.
Příklady: Integrated Data Store (IDS), CA-IDMS.

 - Objektově orientované
    Databáze, kde jsou data uložena jako objekty podobné objektům v programování.
Příklady: db4o, ObjectDB, Versant.