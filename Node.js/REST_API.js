// ============================================================================
// üìò –†–û–ó–î–Ü–õ 1: –¢–µ–æ—Ä—ñ—è API —Ç–∞ –≤–∏–¥–∏ API
// ============================================================================

// API (Application Programming Interface ‚Äî —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—ñ–≤) ‚Äî
// —Ü–µ –Ω–∞–±—ñ—Ä –ø—Ä–∞–≤–∏–ª —ñ –º–µ—Ç–æ–¥—ñ–≤, –∑ –¥–æ–ø–æ–º–æ–≥–æ—é —è–∫–∏—Ö –æ–¥–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞ –º–æ–∂–µ –≤–∑–∞—î–º–æ–¥—ñ—è—Ç–∏ –∑ —ñ–Ω—à–æ—é.

// üëâ –ü—Ä–∏–∫–ª–∞–¥:
// –£ —Ç–µ–±–µ —î –¥–æ–¥–∞—Ç–æ–∫-–ø–æ–≥–æ–¥–∞. –í—ñ–Ω –Ω–µ –∑–±–∏—Ä–∞—î –¥–∞–Ω—ñ —Å–∞–º, –∞ –∑–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –¥–æ API –ø–æ–≥–æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É
// —ñ –æ—Ç—Ä–∏–º—É—î –¥–∞–Ω—ñ (—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É, –≤–æ–ª–æ–≥—ñ—Å—Ç—å —Ç–æ—â–æ). –¢–∏, —è–∫ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫, –º–æ–∂–µ—à –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Ü–µ–π API,
// —â–æ–± –≤–±—É–¥—É–≤–∞—Ç–∏ –ø–æ–≥–æ–¥—É —É —Å–≤—ñ–π –¥–æ–¥–∞—Ç–æ–∫.

// REST API ‚Äî —Ü–µ –æ–¥–∏–Ω –∑ –≤–∏–¥—ñ–≤ API, –æ—Å–Ω–æ–≤–∞–Ω–∏–π –Ω–∞ –ø—Ä–∏–Ω—Ü–∏–ø–∞—Ö REST (Representational State Transfer).
// –ù–∞–π—á–∞—Å—Ç—ñ—à–µ –ø—Ä–∞—Ü—é—î —á–µ—Ä–µ–∑ HTTP —ñ –¥–æ–∑–≤–æ–ª—è—î –∫–ª—ñ—î–Ω—Ç–∞–º (–±—Ä–∞—É–∑–µ—Ä—É, –º–æ–±—ñ–ª—å–Ω–æ–º—É –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É)
// –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ HTTP-–∑–∞–ø–∏—Ç–∏ (GET, POST, PUT, DELETE) —Ç–∞ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON –∞–±–æ XML.

// üîπ –û—Å–Ω–æ–≤–Ω—ñ –≤–∏–¥–∏ API:
// 1. REST API ‚Äî –ø—Ä–æ—Å—Ç–∏–π —ñ –∑—Ä–æ–∑—É–º—ñ–ª–∏–π (GitHub API, Telegram Bot API)
// 2. SOAP API ‚Äî —Å—Ç—Ä–æ–≥–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç, XML, WSDL (—Å—Ç–∞—Ä—ñ –±–∞–Ω–∫—ñ–≤—Å—å–∫—ñ —Å–µ—Ä–≤—ñ—Å–∏)
// 3. GraphQL API ‚Äî –æ–¥–∏–Ω endpoint, –∫–ª—ñ—î–Ω—Ç —Å–∞–º –≤–∏–±–∏—Ä–∞—î –ø–æ–ª—è (Facebook)
// 4. WebSocket API ‚Äî –ø–æ—Å—Ç—ñ–π–Ω–µ –¥–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω—î –∑'—î–¥–Ω–∞–Ω–Ω—è (—á–∞—Ç–∏, —ñ–≥—Ä–∏, –±—ñ—Ä–∂—ñ)
// 5. gRPC ‚Äî —à–≤–∏–¥–∫–∏–π, protobuf, —á–∞—Å—Ç–æ –¥–ª—è –º—ñ–∫—Ä–æ—Å–µ—Ä–≤—ñ—Å—ñ–≤
// 6. SDK/API —á–µ—Ä–µ–∑ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ ‚Äî –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, DOM API, Java API, Python Pandas API
// 7. –û–ø–µ—Ä–∞—Ü—ñ–π–Ω—ñ —Å–∏—Å—Ç–µ–º–Ω—ñ API ‚Äî Windows API, POSIX API

// Middleware ‚Äî –ø—Ä–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó, —â–æ –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è –º—ñ–∂ –∑–∞–ø–∏—Ç–æ–º —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é —Å–µ—Ä–≤–µ—Ä–∞.
// –ü—Ä–∏–∫–ª–∞–¥–∏: –ª–æ–≥—É–≤–∞–Ω–Ω—è, –æ–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫, –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—è, CORS.


// ============================================================================
// üõ† –†–û–ó–î–Ü–õ 2: –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Express —Ç–∞ middleware
// ============================================================================

// –ü—Ä–æ–º—ñ–∂–Ω–µ –ø—Ä–æ–≥—Ä–∞–º–Ω–µ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è (middleware):
// Middleware ‚Äî —Ü–µ —Ñ—É–Ω–∫—Ü—ñ—ó, —è–∫—ñ –≤–∏–∫–æ–Ω—É—é—Ç—å—Å—è –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É –¥–æ —Å–µ—Ä–≤–µ—Ä–∞, –∞–ª–µ –ø–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å.
import express from "express";
import moment from "moment"; // –ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ Moment.js –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞—Ç–∞–º–∏ –∞–ª–µ –≤–æ–Ω–∞ —Ç—Ä–æ–∑–∏ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∞ —ñ –∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ date-fns –∞–±–æ luxon
const app = express();
// –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –º–∏ –º–æ–∂–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ middleware –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤, –æ–±—Ä–æ–±–∫–∏ –ø–æ–º–∏–ª–æ–∫ –∞–±–æ –∞–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.
app.use(async(req, res, next) => {   // next() ‚Äî —Ü–µ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –ø–µ—Ä–µ–¥–∞—î —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É middleware –∞–±–æ –æ–±—Ä–æ–±–Ω–∏–∫—É –º–∞—Ä—à—Ä—É—Ç—É. –Ø–∫—â–æ –Ω–µ –±—É–¥–µ next(), –∑–∞–ø–∏—Ç "–∑–∞–≤–∏—Å–Ω–µ", —Ç–æ–±—Ç–æ —Å–µ—Ä–≤–µ—Ä –≤–∏–∫–æ–Ω–∞—î —Ü–µ–π –∑–∞–ø–∏—Ç —ñ –∑—É–ø–∏–Ω–∏–∏—å—Å—è, –∞ –¥–æ —Å–≤–æ–≥–æ –º–∞—Ä—à–ø–∫—Ç–∫ —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–µ –¥—ñ–π–¥–µ.
  
    // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ª–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—ñ–≤
    const { method, url } = req;
    console.log(`–ó–∞–ø–∏—Ç: ${req.method} ${req.url}`);
    const date = moment().format("YYYY-MM-DD HH:mm:ss"); // moment() –ø–æ—Ö–æ–¥–∏—Ç—å –∑ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ Moment.js ‚Äî —Ü–µ –ø–æ–ø—É–ª—è—Ä–Ω–∞ –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∞ JavaScript –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –¥–∞—Ç–∞–º–∏ —Ç–∞ —á–∞—Å–æ–º. moment() ‚Äî —Ü–µ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç –¥–∞—Ç–∏/—á–∞—Å—É. –í–æ–Ω–∞ –¥–æ–∑–≤–æ–ª—è—î –ª–µ–≥–∫–æ: –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É –π —á–∞—Å; –ø–∞—Ä—Å–∏—Ç–∏ —Å—Ç—Ä–æ–∫–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ –¥–∞—Ç–∏; —Ñ–æ—Ä–º–∞—Ç—É–≤–∞—Ç–∏ –¥–∞—Ç—É –≤ –∑—Ä—É—á–Ω–∏–π –≤–∏–≥–ª—è–¥; –¥–æ–¥–∞–≤–∞—Ç–∏/–≤—ñ–¥–Ω—ñ–º–∞—Ç–∏ –¥–Ω—ñ, –º—ñ—Å—è—Ü—ñ, —Ä–æ–∫–∏ —Ç–æ—â–æ.
    try {
        await fs.appendFile("./public/logs.txt", `${date} - ${method} ${url}\n`); // fs.appendFile ‚Äî —Ü–µ —Ñ—É–Ω–∫—Ü—ñ—è –∑ –º–æ–¥—É–ª—è fs (file system), —è–∫–∞ –¥–æ–¥–∞—î —Ç–µ–∫—Å—Ç –¥–æ —Ñ–∞–π–ª—É. –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î, –≤—ñ–Ω –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π. –£ –Ω–∞—à–æ–º—É –≤–∏–ø–∞–¥–∫—É –º–∏ –∑–∞–ø–∏—Å—É—î–º–æ –¥–∞—Ç—É, –º–µ—Ç–æ–¥ –∑–∞–ø–∏—Ç—É —Ç–∞ URL —É —Ñ–∞–π–ª logs.txt.
    } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –≤ –ª–æ–≥:", error);
    }
    next();
}); // - –õ–æ–≥—É–≤–∞–Ω–Ω—è HTTP-–∑–∞–ø–∏—Ç—ñ–≤ ‚Äî —Ü–µ –æ–¥–Ω–∞ –∑ –æ—Å–Ω–æ–≤ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —Ç–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏. –û—Å—å –æ—Å–Ω–æ–≤–Ω—ñ –ø—Ä–∏—á–∏–Ω–∏, —á–æ–º—É —Ü–µ —Ä–æ–±–ª—è—Ç—å:
// ‚úÖ 1. –í–∏—è–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫
//       –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ–≤—ñ–¥–æ–º–ª—è—î –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É, —Ç–∏ –º–æ–∂–µ—à: –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ª–æ–≥, –ø–æ–±–∞—á–∏—Ç–∏, —è–∫—ñ –∑–∞–ø–∏—Ç–∏ –Ω–∞–¥—Ö–æ–¥–∏–ª–∏,—è–∫—ñ —Å–∞–º–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥–¥–∞–≤–∞–≤ —Å–µ—Ä–≤–µ—Ä, —ñ –∑—Ä–æ–∑—É–º—ñ—Ç–∏, —â–æ –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫.
// ‚úÖ 2. –ê–Ω–∞–ª—ñ–∑ –±–µ–∑–ø–µ–∫–∏
//       –õ–æ–≥–∏ –º–æ–∂—É—Ç—å –ø–æ–∫–∞–∑–∞—Ç–∏: –ø—ñ–¥–æ–∑—Ä—ñ–ª—ñ —Å–ø—Ä–æ–±–∏ –¥–æ—Å—Ç—É–ø—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø—ñ–¥–±—ñ—Ä –ø–∞—Ä–æ–ª—è), –∞—Ç–∞–∫–∏ —Ç–∏–ø—É SQL injection, –∞–±–æ DDOS-–ø–æ–¥—ñ–±–Ω—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å. –¶–µ –¥–∞—î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤—á–∞—Å–Ω–æ –∑—Ä–µ–∞–≥—É–≤–∞—Ç–∏!
// ‚úÖ 3. –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
//       –ú–æ–∂–Ω–∞ –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏: —è–∫—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—ñ, –∑ —è–∫–∏—Ö IP-–∞–¥—Ä–µ—Å –Ω–∞–π—á–∞—Å—Ç—ñ—à–µ –∑–≤–µ—Ä—Ç–∞—é—Ç—å—Å—è, –≤ —è–∫—ñ –≥–æ–¥–∏–Ω–∏ —Å–µ—Ä–≤–µ—Ä –Ω–∞–π–±—ñ–ª—å—à –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π.
// ‚úÖ 4. –Ü—Å—Ç–æ—Ä—ñ—è –¥—ñ–π
//       –õ–æ–≥ ‚Äî —Ü–µ —è–∫ —á–æ—Ä–Ω–∞ —Å–∫—Ä–∏–Ω—å–∫–∞. –Ø–∫—â–æ —â–æ—Å—å –∑–ª–∞–º–∞–ª–æ—Å—å –∞–±–æ —Å–µ—Ä–≤–µ—Ä –≤–ø–∞–≤, –º–æ–∂–Ω–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å, —â–æ –≤—ñ–¥–±—É–≤–∞–ª–æ—Å—å –¥–æ —Ü—å–æ–≥–æ.
// ‚úÖ 5. –ó–∞–∫–æ–Ω–æ–¥–∞–≤—á—ñ –≤–∏–º–æ–≥–∏
//       –£ –¥–µ—è–∫–∏—Ö –∫—Ä–∞—ó–Ω–∞—Ö —á–∏ —Å—Ñ–µ—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –±–∞–Ω–∫—ñ–Ω–≥, –æ—Ö–æ—Ä–æ–Ω–∞ –∑–¥–æ—Ä–æ–≤‚Äô—è) –≤–∏–º–æ–≥–∏ –±–µ–∑–ø–µ–∫–∏ –∑–æ–±–æ–≤‚Äô—è–∑—É—é—Ç—å –≤–µ—Å—Ç–∏ –ª–æ–≥–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ —Ç–∞ –∞—É–¥–∏—Ç—ñ–≤.
// üõ†Ô∏è –õ–æ–≥—É—é—Ç—å —É Node.js / Express –∑–∞–∑–≤–∏—á–∞–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏:
// [`morgan`](https://www.npmjs.com/package/morgan) ‚Äî –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è HTTP-–∑–∞–ø–∏—Ç—ñ–≤,
// [`winston`](https://www.npmjs.com/package/winston) ‚Äî –¥–ª—è –≥–Ω—É—á–∫–æ–≥–æ –ª–æ–≥—É–≤–∞–Ω–Ω—è —É —Ñ–∞–π–ª –∞–±–æ –±–∞–∑—É. 

// –ö—Ä–∞—â–µ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –ª–æ–≥–∏ –≤ –æ–∫—Ä–µ–º—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:
// /logs/logs.txt –Ü –¥–æ–¥–∞—Ç–∏ —Ü—é –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –≤ .gitignore.
// –õ–æ–≥—É–≤–∞—Ç–∏ –º–æ–∂–Ω–∞ —Ä—ñ–∑–Ω—ñ –¥–∞–Ω—ñ –∑ –∑–∞–ø–∏—Ç—É —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:
//   req.ip ‚Äî IP –∫–ª—ñ—î–Ω—Ç–∞
//   req.headers['user-agent'] ‚Äî —Ç–∏–ø –±—Ä–∞—É–∑–µ—Ä–∞
//   —Å—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (res.statusCode) ‚Äî –∞–ª–µ –π–æ–≥–æ —Ç—Ä–µ–±–∞ –ª–æ–≤–∏—Ç–∏ –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, –¥–ª—è —Ü—å–æ–≥–æ —Ç—Ä–µ–±–∞ –¥–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–Ω–∏–∫ res.on('finish', ...)


// –û–±—Ä–æ–±–∏–º–æ –ø–æ–º–∏–ª–∫—É 404, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è –¥–æ –Ω–µ—ñ—Å–Ω—É—é—á–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é middleware:
app.use((req, res) => {
    res.status(404).send("<h1>404 - –°—Ç–æ—Ä—ñ–Ω–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!</h1>");
});
// –∞–±–æ –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ —Ç–∞–∫:
app.use((req, res) => {
    res.status(404).json({
        error: "–°—Ç–æ—Ä—ñ–Ω–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!",
        status: 404,
        message: "–°—Ç–æ—Ä—ñ–Ω–∫–∞, —è–∫—É –≤–∏ —à—É–∫–∞—î—Ç–µ, –Ω–µ —ñ—Å–Ω—É—î."
    });
});

// –©–µ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é middleware –º–æ–∂–Ω–∞ –æ–±—Ä–æ–±–ª—è—Ç–∏ –ø–æ–º–∏–ª–∫–∏ CORS (Cross-Origin Resource Sharing), —Ç–æ–±—Ç–æ –¥–æ–∑–≤–æ–ª—è—Ç–∏ –∑–∞–ø–∏—Ç–∏ –∑ —ñ–Ω—à–∏—Ö –¥–æ–º–µ–Ω—ñ–≤. –¶–µ –≤–∞–∂–ª–∏–≤–æ, —è–∫—â–æ —Ç–≤—ñ–π —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —ñ –±–µ–∫–µ–Ω–¥ —Ä–æ–∑–º—ñ—â–µ–Ω—ñ –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö –¥–æ–º–µ–Ω–∞—Ö –∞–±–æ –ø–æ—Ä—Ç–∞—Ö. –ù–∞–ø—Ä–∏–∫–ª–∞–¥, —è–∫—â–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–∞ localhost:3000, –∞ –±–µ–∫–µ–Ω–¥ –Ω–∞ localhost:5000, —Ç–æ –±—Ä–∞—É–∑–µ—Ä –º–æ–∂–µ –±–ª–æ–∫—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç–∏ —á–µ—Ä–µ–∑ –ø–æ–ª—ñ—Ç–∏–∫—É –±–µ–∑–ø–µ–∫–∏. –©–æ–± —Ü—å–æ–≥–æ —É–Ω–∏–∫–Ω—É—Ç–∏, –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ middleware –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è CORS:
const cors = require ("cors"); // npm i cors
app.use(cors({
    origin: "http://localhost:3000", // –î–æ–∑–≤–æ–ª—è—î–º–æ –∑–∞–ø–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ –∑ —Ü—å–æ–≥–æ –¥–æ–º–µ–Ω—É
    methods: ["GET", "POST", "PUT", "DELETE"], // –î–æ–∑–≤–æ–ª—è—î–º–æ —Ü—ñ –º–µ—Ç–æ–¥–∏
    credentials: true // –î–æ–∑–≤–æ–ª—è—î–º–æ –ø–µ—Ä–µ–¥–∞—á—É –∫—É–∫—ñ–≤
})); // –¶–µ –¥–æ–∑–≤–æ–ª–∏—Ç—å —Ç–≤–æ—î–º—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É –Ω–∞ localhost:3000 —Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç–∏ –¥–æ –±–µ–∫–µ–Ω–¥—É –Ω–∞ localhost:5000 –±–µ–∑ –ø–æ–º–∏–ª–æ–∫ CORS.
// –∞–±–æ —è–∫—â–æ —è —Ö–æ—á—É –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –∑–∞–ø–∏—Ç–∏ –∑ —É—Å—ñ—Ö –¥–æ–º–µ–Ω—ñ–≤, –º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ —Ç–∞–∫:
app.use(cors({
    origin: "*", // –î–æ–∑–≤–æ–ª—è—î–º–æ –∑–∞–ø–∏—Ç–∏ –∑ —É—Å—ñ—Ö –¥–æ–º–µ–Ω—ñ–≤
    methods: ["GET", "POST", "PUT", "DELETE"], // –î–æ–∑–≤–æ–ª—è—î–º–æ —Ü—ñ –º–µ—Ç–æ–¥–∏
    credentials: true // –î–æ–∑–≤–æ–ª—è—î–º–æ –ø–µ—Ä–µ–¥–∞—á—É –∫—É–∫—ñ–≤
}));
// –∞–±–æ —Ç–∞–∫:
app.use(cors()); // –¶–µ –¥–æ–∑–≤–æ–ª–∏—Ç—å –∑–∞–ø–∏—Ç–∏ –∑ —É—Å—ñ—Ö –¥–æ–º–µ–Ω—ñ–≤ —ñ –≤—Å—ñ—Ö –º–µ—Ç–æ–¥—ñ–≤. –ê–ª–µ —Ü–µ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è —Ä–æ–±–∏—Ç–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω, –±–æ –º–æ–∂–µ –±—É—Ç–∏ –Ω–µ–±–µ–∑–ø–µ—á–Ω–æ. –ö—Ä–∞—â–µ –≤–∫–∞–∑—É–≤–∞—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –¥–æ–º–µ–Ω–∏, –∑ —è–∫–∏—Ö –¥–æ–∑–≤–æ–ª–µ–Ω—ñ –∑–∞–ø–∏—Ç–∏.



// –ù–µ –∑—Ä—É—á–Ω–æ —Ä–æ–±–∏—Ç–∏ –≤—Å—ñ –∑–∞–ø–∏—Ç–∏ –≤ app.js, —Ç–æ–º—É —Å—Ç–≤–æ—Ä—é—î–º–æ –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ REST API, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, routes/api/books.js (–¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å—É –º–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, books.js, users.js —ñ —Ç.–¥.).
// routes/api/books.js
const express = require("express");
const router = express.Router(); // app - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–µ—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∑–∞–ø—É—Å–∫—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä—É, –∞ —è–∫–∑—â–æ –º–∏ —Ö–æ—á–µ–º–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–∫—Ä–µ–º–∏–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ API, —Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ express.Router().
const books = require("../../data/books.json"); // –ü—Ä–∏–ø—É—Å—Ç–∏–º–æ, —â–æ —É –Ω–∞—Å —î —Ñ–∞–π–ª books.json –∑ –¥–∞–Ω–∏–º–∏ –∫–Ω–∏–≥.
router.get("/", (req, res) => { // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫–Ω–∏–≥
    res.json(books); // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –º–∞—Å–∏–≤ –∫–Ω–∏–≥ —É —Ñ–æ—Ä–º–∞—Ç—ñ JSON
});
router.get("/:id", (req, res) => { // –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–Ω–∏–≥–∏ –∑–∞ ID
    req.json(books[0]); // –û—Ç—Ä–∏–º—É—î–º–æ ID –∫–Ω–∏–≥–∏ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ URL
});

module.exports = router; // –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ —Ä–æ—É—Ç–µ—Ä, —â–æ–± –π–æ–≥–æ –º–æ–∂–Ω–∞ –±—É–ª–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤ —ñ–Ω—à–∏—Ö —Ñ–∞–π–ª–∞—Ö.

// app.js
import express from "express";
const cors = require("cors");
import booksRouter from "./routes/api/books.js"; // –Ü–º–ø–æ—Ä—Ç—É—î–º–æ —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–Ω–∏–≥–∞–º–∏
// const app = express();
app.use(cors()); // –î–æ–¥–∞—î–º–æ CORS, —â–æ–± –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –∑–∞–ø–∏—Ç–∏ –∑ —ñ–Ω—à–∏—Ö –¥–æ–º–µ–Ω—ñ–≤
app.use(express.json()); // –î–æ–¥–∞—î–º–æ middleware –¥–ª—è –æ–±—Ä–æ–±–∫–∏ JSON-—Ç bodies –∑–∞–ø–∏—Ç
app.use("/api/books", booksRouter); // –Ø–∫—â–æ –∑–∞–ø–∏—Ç –¥–æ API –ø–æ—á–∏–Ω–∞–ª–∏—Å—è –∑ /api/books, —Ç–æ —Ç–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —à—É–∫–∞–π –≤ booksRouter, —Ç–æ–±—Ç–æ –≤ routes/api/books.js
app.use((req, res) => { // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—É, —Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ 404
    res.status(404).json({ message: "Not Found" });
});
// –ó–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 3000
app.listen(3000, () => {
    console.log("Server running on http://localhost:3000");
});


// ============================================================================
// üìÇ –†–û–ó–î–Ü–õ 3: CRUD –ø—Ä–∏–∫–ª–∞–¥–∏ –∑ JSON
// ============================================================================

// –º–µ—Ç–æ–¥–∏ HTTP –¥–ª—è REST API:

// req.params - –º—ñ—Å—Ç–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–∞—Ä—à—Ä—É—Ç—É, –≤–∫–∞–∑–∞–Ω—ñ –≤ URL. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –ø—Ä–∏ –º–∞—Ä—à—Ä—É—Ç–∞—Ö –∑ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏, 
// –ù–∞–ø—Ä–∏–∫–ª–∞–¥: GET http://localhost:3000/users/123
app.get("/users/:id", (req, res) => {
    console.log(req.params.id); // –û—Ç—Ä–∏–º–∞—î–º–æ "123" –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ /users/123
});
// –∞–±–æ  GET http://localhost:3000/users/123/lovelyType
app.get("/users/:id/:type", (req, res) => {
    console.log(req.params); // –û—Ç—Ä–∏–º–∞—î–º–æ {id: "123", type: "lovelyType"}
    console.log(req.params.id); // –û—Ç—Ä–∏–º–∞—î–º–æ "123"
    console.log(req.params.type); // –û—Ç—Ä–∏–º–∞—î–º–æ "loveluType"
});


// req.query - –º—ñ—Å—Ç–∏—Ç—å query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∏ ‚Äî —á–∞—Å—Ç–∏–Ω–∞ URL –ø—ñ—Å–ª—è –∑–Ω–∞–∫–∞ ? –ü—Ä–∞—Ü—é—î –Ω–∞ –≤—Å—ñ—Ö –º–∞—Ä—à—Ä—É—Ç–∞—Ö, –Ω–µ –≤–∏–º–∞–≥–∞—î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏—Ö –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ñ–≤
// –ù–∞–ø—Ä–∏–∫–ª–∞–¥: GET http://localhost:3000/users?id=123
app.get("/", (req, res) => {
    console.log(req.query.id); // –æ—Ç—Ä–∏–º–∞—î–º–æ "123"
});

//req.body - –º—ñ—Å—Ç–∏—Ç—å —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É (–∑–∞–∑–≤–∏—á–∞–π –¥–ª—è POST, PUT, PATCH –∑–∞–ø–∏—Ç—ñ–≤). –ü–æ—Ç—Ä–µ–±—É—î middleware, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ express.json()
// –ü—Ä–∏–∫–ª–∞–¥:
app.post("/users", (req, res) => {
    console.log(req.body); // –û—Ç—Ä–∏–º–∞—î–º–æ —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: { name: "Alice" }
});

// req.headers - –º—ñ—Å—Ç–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø–∏—Ç—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, Authorization, Content-Type —ñ —Ç.–¥.)
app.get("/check", (req, res) => {
    console.log(req.headers['authorization']);
});

// req.method - –º—ñ—Å—Ç–∏—Ç—å HTTP-–º–µ—Ç–æ–¥ –∑–∞–ø–∏—Ç—É (GET, POST, PUT, DELETE —ñ —Ç.–¥.)
app.get("/method", (req, res) => {
    console.log(req.method); // –û—Ç—Ä–∏–º–∞—î–º–æ "GET" –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ /method
});

// 1. GET ‚Äî –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –∞–±–æ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤)
const getAllContacts = async () => {
  try {
    const contactsPath = path.resolve("contacts.json");
    const data = await fs.readFile(contactsPath, "utf-8"); // —á–∏—Ç–∞—î–º–æ —Ñ–∞–π–ª —è–∫ —Ç–µ–∫—Å—Ç
    return JSON.parse(data); // –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ JSON-—Ç–µ–∫—Å—Ç —É –º–∞—Å–∏–≤ –æ–±‚Äô—î–∫—Ç—ñ–≤
  } catch (error) {
    console.log("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤:", error.message);
  }
};

// 2. GET - –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ ID
const getContactById = async (contactId) => {
  try {
    const contacts = await getAllContacts();
    return contacts.find((contact) => contact.id === contactId) || null;
  } catch (error) {
    console.log("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–∞:", error.message);
  }
};

// 3. POST - –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∫–æ–Ω—Ç–∞–∫—Ç
// Joi-—Å—Ö–µ–º–∞ –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
const contactAddSchema = Joi.object({
  name: Joi.string().min(3).required(), // —ñ–º‚Äô—è ‚Äî –º—ñ–Ω—ñ–º—É–º 3 —Å–∏–º–≤–æ–ª–∏
  email: Joi.string()
    .email({ tlds: { allow: false } }) // —Ñ–æ—Ä–º–∞—Ç email
    .required(),
  phone: Joi.string()
    .pattern(/^\+?[0-9]{7,15}$/) // –Ω–æ–º–µ—Ä –≤—ñ–¥ 7 –¥–æ 15 —Ü–∏—Ñ—Ä, –º–æ–∂–µ –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ "+"
    .required(),
});

const addContact = async (body) => {
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
    const { error } = contactAddSchema.validate(body, { abortEarly: false });
    if (error) {
      throw new Error("–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: " + error.message);
    }

    const contacts = await getAllContacts();
    const newContact = { id: nanoid(), ...body };

    contacts.push(newContact); // –¥–æ–¥–∞—î–º–æ —É –º–∞—Å–∏–≤
    await fs.writeFile(contactsPath, JSON.stringify(contacts, null, 2));

    return newContact;
  } catch (error) {
    console.log("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∞:", error.message);
  }
};

// 4. PUT - –û–Ω–æ–≤–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π –∫–æ–Ω—Ç–∞–∫—Ç
// =============================
const updateContact = async (id, body) => {
  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–∞–Ω–∏—Ö
    const { error } = contactAddSchema.validate(body, { abortEarly: false });
    if (error) {
      throw new Error("–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: " + error.message);
    }

    const contacts = await getAllContacts();
    const index = contacts.findIndex((item) => item.id === id);

    if (index === -1) {
      return null; // —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
    }

    contacts[index] = { id, ...body };
    await fs.writeFile(contactsPath, JSON.stringify(contacts, null, 2));

    return contacts[index];
  } catch (error) {
    console.log("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∞:", error.message);
  }
};

// 5. DELETE - –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç
const removeContact = async (id) => {
  try {
    const contacts = await getAllContacts();
    const index = contacts.findIndex((item) => item.id === id);

    if (index === -1) {
      return null; // —è–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
    }

    const removedContact = contacts.splice(index, 1)[0];
    await fs.writeFile(contactsPath, JSON.stringify(contacts, null, 2));

    return removedContact;
  } catch (error) {
    console.log("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∞:", error.message);
  }
};

// ============================================================================
// üîπ HttpError helper
// ============================================================================
const HttpError = (status, message) => {
    const error = new Error(message);
    error.status = status;
    return error;
};

// ============================================================================
// üîπ –ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è (–º–æ–∂–Ω–∞ –∑–∞–∫–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏ –ø—ñ–¥ —á–∞—Å –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞)
// ============================================================================
// (async () => {
//   console.log(await getAllContacts());
//   console.log(await getContactById("AeHIrLTr6JkxGE6SN-0Rw"));
//   console.log(await addContact({ name: "Ivan Petrov", email: "ivan@gmail.com", phone: "+380671234567" }));
//   console.log(await updateContact("AeHIrLTr6JkxGE6SN-0Rw", { name: "Updated Name", email: "new@mail.com", phone: "+380671234568" }));
//   console.log(await removeContact("AeHIrLTr6JkxGE6SN-0Rw"));
// })();